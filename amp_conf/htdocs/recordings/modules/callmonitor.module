<?php

/**
 * @file
 * Functions for the interface to the call monitor recordings
 */

/**
  * Class for callmonitor
  */
class callmonitor {

  /*
   * rank (for prioritizing modules)
   */
  function callmonitor_rank() {

    $rank = 2;
    return $rank;
  }

  /*
   * Adds menu item to nav menu
   *
   * @param $args
   *   Common arguments
   */
  function callmonitor_nav_menu($args) {

    $ret .= "
      <p><small><small><a href='" . $_SERVER['PHP_SELF'] . "?m=callmonitor&f=display'>" . _("Call Monitor") . "</a></small></small></p>";

    return $ret;
  }

  /*
   * Acts on the selected call monitor recordings in the method indicated by the action and updates page
   *
   * @param $args
   *   Common arguments
   */
  function callmonitor_rec_action($args) {

    global $asterisk_callmonitor_path;

    // args
    $m = get_argument($args,'m');
    $a = get_argument($args,'a');
    $q = get_argument($args,'q');
    $start = get_argument($args,'start');
    $span = get_argument($args,'span');

    // get files
    $files = array();
    foreach($_REQUEST as $key => $value) {
      if (preg_match('/selected/',$key)) {
        array_push($files, $value);
      }
    }

    if ($a=='delete') {
      $this->delete_rec_data($files);
    }

    // redirect to see updated page
    $ret .= "
      <head>
        <script>
        <!--
          window.location = \"" . $_SERVER['PHP_SELF'] . "?m=" . $m . "&q=" . $q . "&start=" . $start . "&span=" .$span . "\"
        // -->
        </script>
      </head>";

    return $ret;
  }

  /*
   * Displays stats page
   *
   * @param $args
   *   Common arguments
   */
  function callmonitor_display($args) {

    global $asterisk_callmonitor_path;
    global $callmonitor_allow_delete;

    $display = new DisplaySearch();

    // get the search string
    $m = get_argument($args,'m');
    $q = get_argument($args,'q');
    $start = get_argument($args,'start');
    $span = get_argument($args,'span');

    $start = $start=='' ? 0 : $start ;
    $span = $span=='' ? 15 : $span ;

    $paths = split(';',$asterisk_callmonitor_path);

    // get data
    $this->get_cdr_count($q,$recordCount);
    $data = array();
    $this->get_cdr_data($q,$start,$span,$data);

    // build controls

    // get the call monitor recordings from the asterisk server
    $files = array();
    $filter = '';
    $recursiveMax = 6;
    $recursiveCount = 0;
    foreach($paths as $key => $path) {
      get_files($path,$filter,$recursiveMax,$recursiveCount,$files);
    }

    // table controls
    if ($callmonitor_allow_delete) {
      $controls = "
        <button class='infobar' type='submit' onclick=\"document.callmonitor_form.a.value='delete'\">
        " . _("delete") . "
        </button>
        </select>";
    }

    // table header
    if ($callmonitor_allow_delete) {
      $recording_delete_header = "<th></th>";
    }

    // table body
    $used = array();
    foreach($data as $key=>$value) {

      // date and time
      $buf = split(' ', $value[calldate]);
      $date = $buf[0];
      $time = $buf[1];

      // recording popup
      $recordingLink = '';
      foreach($paths as $key => $path) {
        $recording = $this->get_recording($path,$files,$used,$value['uniqueid'],$value[lastdata],$value[calldate],$value[duration]);
        if (isset($recording)) {
          break;
        }
      }

      // recording delete checkbox
      if ($callmonitor_allow_delete) {
        $recording_delete_checkbox = "<td class='checkbox'><input type=checkbox name='selected" . ++$i . "' value=" . $recording . "></td>";
      }

      if (is_file($recording)) {
        $recordingLink = "<a href='#' onClick=\"javascript:popUp('misc/recording_popup.php?recording=" . $recording . "&date=" . $date . "&time=" . $time . "')\">" . _("play") . "</a>";
      }
    
      $tableText .= "<tr>
                       " . $recording_delete_checkbox . "
	               <td width=70>" . $date . "</td>
	               <td>" . $time . "</td>
	               <td>" . $value[clid] . "</td>
	               <td>" . $value[src] . "</td>
	               <td>" . $value[dst] . "</td>
	               <td>" . $value[dcontext] . "</td>
	               <td>" . $value[duration] . " sec</td>
	               <td>" . $recordingLink . "</td>
	             </tr>";
    }
    if (!count($data)) {
      $tableText .= "<tr></tr>";
    }

    // build page content
    $ret .= CheckErrorMessage();

    if ($_SESSION['ari_user']['admin_callmonitor']) {
      $headerText = _("Call Monitor");
    } else {
      $headerText = _("Call Monitor") . " " . _("for") . " " . $_SESSION['ari_user']['name'] . " (" . $_SESSION['ari_user']['extension'] . ")";
    }
    $ret .= $display->DisplayHeaderText($headerText);
    $ret .= $display->DisplaySearchBlock('left',$m,$folder,$q,true);

    // start form
    if ($callmonitor_allow_delete) {

      $ret .= "
        <form  name='callmonitor_form' action='" . $_SERVER['PHP_SELF'] . "' method='GET'>
          <input type=hidden name=m value=" . $m . ">	
          <input type=hidden name=f value=rec_action>
          <input type=hidden name=a value=''>
          <input type=hidden name=q value=" . $q . ">
          <input type=hidden name=start value=" . $start . ">
          <input type=hidden name=span value=" . $span . ">";
    }
    $ret .= $display->DisplayInfoBarBlock($controls,$q,$start,$span,$recordCount);

    // javascript for popup and message actions
    $ret .= "
      <SCRIPT LANGUAGE='JavaScript'>
      <!-- Begin
      function popUp(URL) {
        eval(\"page = window.open(URL, 'play', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=1,width=324,height=110');\");
      }

      function checkAll(form,set) {
        var elem = 0;
        var i = 0;
        while (elem = form.elements[i]) {
          if (set) {
            elem.checked = true;
          } else {
            elem.checked = false;
          }
          i++;
        }
        return true;
      }
      // End -->
      </script>";

    // call monitor recording delete controls
    if ($callmonitor_allow_delete) {
      $ret .= "
        <table>
          <tr>
            <td>
              <small>" . _("select") . ": </small>
              <small><a href='' OnClick=\"checkAll(document.callmonitor_form,true); return false;\">" . _("all") . "</a></small>
              <small><a href='' OnClick=\"checkAll(document.callmonitor_form,false); return false;\">" . _("none") . "</a></small>
            </td>
          </tr>
        </table>";
    }
    else {
      $ret .= "<br>";
    }

    // table body
    $ret .= "
      <table class='callmonitor'>
         <tr>
           " . $recording_delete_header . "
           <th>" . _("Date") . "</th>
           <th>" . _("Time") . "</th>
           <th>" . _("Caller ID") . "</th>
           <th>" . _("Source") . "</th>
           <th>" . _("Destination") . "</th>
           <th>" . _("Context") . "</th>
           <th>" . _("Duration") . "</th>
           <th>" . _("Monitor") . "</th>
         </tr>
         " . $tableText . "
       </table>";

    // end form
    if ($callmonitor_allow_delete) {
      $ret .= "</form>";
    }

    $ret .= $display->DisplaySearchBlock('center',$m,$folder,$q,false);
    $ret .= $display->DisplayNavigationBlock($m,$folder,$q,$start,$span,$recordCount);

    return $ret;
  }

  /*
   * Checks for a recording file
   *
   * @param $dir
   *   path call monitor recording directory on the asterisk server
   * @param $files
   *   current call monitor recordings on the asterisk server
   * @param $used
   *   keep track of what recordings already have been used
   * @param $lastdata
   *   last action recorded in database
   * @param $calldate
   *   date call was made
   * @param $recording
   *   Reference to the variable to store a $recording name if found
   */
  function get_recording($dir,$files,$used,$uniqueNum,$lastdata,$calldate,$duration) {

    $recording='';

    // timestamps
    $st = trim(strtotime($calldate));
    $et = trim(strtotime($calldate) + $duration);   // for on-demand call recordings

    // unique id
    if ($uniqueNum) {
      $buf = preg_replace('/\-|\:/', '', $calldate);
      $uniqueID = preg_replace('/\s+/', '-', $buf) . "-" . $uniqueNum;
    }
    if ($uniqueID=='') {
      $buf = preg_split("/\|/", $lastdata);
      $uniqueID = $buf[1];
    }

    // try to find a file using the unique id
    if (isset($uniqueID)) {

      // try to match a known inbound file type
      $path = $dir . $uniqueID . ".WAV";
      if (is_file($path)) {
        $recording = $path;
      }

      // try to match a known outbound file type
      $path = $dir . "OUT" . $_SESSION['ari_user']['extension'] . "-" . $uniqueID . ".WAV";
      if (is_file($path)) {
        $recording = $path;
      }

      // try and match the unique id
      if (!$recording) { 
        foreach($files as $key => $path) {
          if (strlen($uniqueNum)>1 && strpos($path,$uniqueNum)!=FALSE) {
            $recording = $path;
            break;
          }
        } 
      }
    } 

    // try and match a file using the calldate (if no unique number from database)
    if (!$recording && !$uniqueNum) { 
      foreach($files as $key => $path) {
        $parts = split("-", $path);
        if (strlen($st)>1 && 
              (strpos($path,$st)!==FALSE || 
               (strpos($path,"auto")!==FALSE && $parts[1] >= $st && $parts[1] <= $et))) {
          $recording = $path;
          break;
        }
      } 
    }

    // one last stab at finding a recording by adding a second
    if (!$recording && !$uniqueNum) { 
      $st_1 = trim($st+1);
      $st_2 = trim($st+2);
      $et_1 = trim($et+1);
      $et_2 = trim($et+2);
      foreach($files as $key => $path) {
        $split = explode("-", $path);
        if (strlen($st)>1 
              && (strpos($path,$st_1)!==FALSE || 
                  strpos($path,$st_2)!==FALSE ||
                  (strpos($path,"auto")!==FALSE && $parts[1] >= $st_1 && $parts[1] <= $et_1) ||
                  (strpos($path,"auto")!==FALSE && $parts[1] >= $st_2 && $parts[1] <= $et_2))) {
          $recording = $path;
          break;
        }
      } 
    }

    // check that the recording has not already been used
    if ($recording) { 
      foreach($used as $path) {
        if ($recording==$path) {
          $recording = '';
          break;
        }
      } 
    }
    
    // add to used array
    if ($recording) {
      array_push($used,$recording);
    }

    return $recording;
  }

  /*
   * Deletes selected call monitor recordings
   *
   * @param $files
   *   Array of files to delete
   */
  function delete_rec_data($files) {

    foreach($files as $key => $file) {
      if (is_writable($file)) {
        unlink($file);
      } else {
        $_SESSION['ari_error'] = _("Only deletes recording files, not cdr log");
      }
    }
  }

  /*
   * Gets cdr record count
   *
   * @param $q
   *   query text
   */
  function get_search_text($q) {

    // searchText
    if ($q != '*' && $q != NULL) {
      $searchText .= "WHERE ";
      $tok = strtok($q," \n\t");
      while ($tok) {
        $searchText .= " (calldate regexp '" . $tok . "'
                         OR clid regexp '" . $tok . "'
                         OR src regexp '" . $tok . "'
                         OR dst regexp '" . $tok . "'
                         OR dcontext regexp '" . $tok . "'
                         OR duration regexp '" . $tok . "'
                         OR disposition regexp '" . $tok . "'
                         OR uniqueid regexp '" . $tok . "'
                       )";
        $tok = strtok(" \n\t");
        if ($tok) {
          $searchText .= " AND";
        }
      }
    }

    // admin
    if (!$_SESSION['ari_user']['admin_callmonitor']) {
      if (!$searchText) {
        $searchText .= "WHERE ";
      } else {
        $searchText .= "AND ";
      }
      $searchText .= "(src = '" . $_SESSION['ari_user']['extension'] . "'
                      OR dst = '" . $_SESSION['ari_user']['extension'] . "')";
    }

    return $searchText;
  }

  /*
   * Gets cdr record count
   *
   * @param $q
   *   query text
   * @param $count
   *   Reference to the variable to store the data in
   */
  function get_cdr_count($q,&$count) {

    $searchText = $this->get_search_text($q);

    $dbh = $_SESSION['dbh_cdr'];
    $sql = "SELECT count(*) 
            FROM cdr
            " . $searchText;

    $result = $dbh->getAll($sql);
    if (DB::isError($result)) {
      $_SESSION['ari_error'] = $result->getMessage();
      return;
    }
    $count = $result[0][0];
  }

  /*
   * Gets cdr data
   *
   * @param $q
   *   query text
   * @param $start
   *   start record
   * @param $span
   *   number of records to return
   * @param $data
   *   Reference to the variable to store the data in
   */
  function get_cdr_data($q,$start,$span,&$data) {

    $searchText = $this->get_search_text($q);

    $dbh = $_SESSION['dbh_cdr'];
    $sql = "SELECT calldate, 
                   clid, 
                   src,
                   dst, 
                   dcontext, 
                   lastapp, 
                   lastdata, 
                   duration, 
                   disposition, 
                   amaflags, 
                   uniqueid, 
                   userfield 
             FROM cdr 
             " . $searchText . "
             ORDER BY calldate desc
             LIMIT " . $start . "," . $span;
    $result = $dbh->getAll($sql,DB_FETCHMODE_ASSOC);
    if (DB::isError($result)) {
      $_SESSION['ari_error'] = $result->getMessage();
      return;
    }
    $data = $result;
  }


}


?>
