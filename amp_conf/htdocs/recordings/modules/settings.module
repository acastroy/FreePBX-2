<?php

/**
 * @file
 * Functions for the interface to the call monitor recordings
 */

/**
  * Class for settings
  */
class settings {

  var $protocol_table;
  var $protocol_config_file;

  /*
   * Constructor
   */
  function settings() {

    global $protocols;

    foreach ($protocols as $protocol => $value) {
      $data = array();
      $this->get_record_settings($value['table'],$_SESSION['ari_user']['extension'],&$data);
      if (count($data)) {
        $this->protocol_table = $value['table'];  
        $this->protocol_config_file = $value['config_file'];  
        break;
      }
    }
  }

  /*
   * rank (for prioritizing modules)
   */
  function settings_rank() {

    $rank = 100000;
    return $rank;
  }

  /*
   * Adds menu item to nav menu
   *
   * @param $args
   *   Common arguments
   */
  function settings_nav_menu($args) {

    // put if statement in return string, because do not know $logout until page is built
    $ret .= "
      <?php if ($logout !='') { ?>
        <br>
        <p><small><small><a href='" . $_SERVER['PHP_SELF'] . "?m=settings&f=display'>Settings</a></small></small></p>
      <?php } ?>";

    return $ret;
  }

  /*
   * Acts on the user settings
   *
   * @param $args
   *   Common arguments
   * @param $a
   *   action
   */
  function settings_action($args) {

    global $asterisk_voicemail_conf;
    global $settings_allow_call_recording_set;

    // args
    $m = get_argument($args,'m');
    $a = get_argument($args,'a');

    $lang_code = get_argument($args,'lang_code');

    $voicemail_password = get_argument($args,'voicemail_password');
    $voicemail_password_confirm = get_argument($args,'voicemail_password_confirm');
    $voicemail_audio_format = get_argument($args,'voicemail_audio_format');

    $record_in = get_argument($args,'record_in');
    $record_out = get_argument($args,'record_out');

    if ($a=='update') {

      // update i18n language setting
      if (extension_loaded('gettext')) {
        setcookie("ari_lang", $lang_code, time()+365*24*60*60);
      }

      // update voicemail password
      if ($voicemail_password=='' || $voicemail_password_confirm=='') {
        $_SESSION['ari_error'] = 
          _("Voicemail password not changed") . "<br>" .
          _("Password and password confirm must not be blank");
      }
      else if (strlen($voicemail_password)!=4 || !is_numeric($voicemail_password)) {
        $_SESSION['ari_error'] = 
          _("Voicemail password not changed") . "<br>" .
          _("Password must be all numbers and 4 digits");
      }
      else if ($voicemail_password!=$voicemail_password_confirm) {
        $_SESSION['ari_error'] = 
          _("Voicemail password not changed") . "<br>" .
          _("Password and password confirm do not match");
      }
      else {

        // check for writable the files
        $temp_file = $asterisk_voicemail_conf . ".tmp";
        $fp = fopen($temp_file, "w");
        if (!$fp) {
          $_SESSION['ari_error'] = 
            _("Voicemail password not changed") . "<br>" .
            $temp_file . " " . _("does not exist or is not writable");
        }
        else if (!is_writable($asterisk_voicemail_conf)) {
          $_SESSION['ari_error'] = 
            _("Voicemail password not changed") . "<br>" .
            $asterisk_voicemail_conf . " " . _("does not exist or is not writable");
        }
        else {

          // save password
          $lines = file($asterisk_voicemail_conf);
          foreach ($lines as $key => $line) {
            unset($value);
            list($var,$value) = split('=>',$line);
            $var = trim($var);
            if ($var==$_SESSION['ari_user']['extension'] && $value) {

              // write out line with password change
              $buf = split(',',$value);
              $buf[0] = $voicemail_password;
              $line = $var . " => " . join(',', $buf);
              fwrite($fp, $line);
            }
            else {

              // write out original line with no changes
              fwrite($fp, $line);
            }
          }
          fclose($fp);
          unlink($asterisk_voicemail_conf);
          rename($temp_file,$asterisk_voicemail_conf);
        }
      }
  
      // update voicemail audio format setting
      setcookie("ari_voicemail_audio_format", $voicemail_audio_format, time()+365*24*60*60);

      // update call monitor record setting
      if ($settings_allow_call_recording_set) {
        $extension = $_SESSION['ari_user']['extension'];
        if ($record_in && $record_out) {
          $this->set_recording_status($extension, "In", $record_in);
          $this->set_recording_status($extension, "Out", $record_out);

          $this->set_record_settings($this->protocol_config_file,$this->protocol_table,$extension,$record_in,$record_out);
        }
      }
    }

    // redirect to see updated page
    $ret .= "
      <head>
        <script>
        <!--
          window.location = \"" . $_SERVER['PHP_SELF'] . "?m=" . $m . "\"
        // -->
        </script>
    </head>";
  
    return $ret;
  }

  /*
   * Displays stats page
   *
   * @param $args
   *   Common arguments
   */
  function settings_display($args) {

    global $settings_allow_call_recording_set;

    // args
    $m = get_argument($args,'m');
    $q = get_argument($args,'q');
    $start = get_argument($args,'start');
    $span = get_argument($args,'span');

    $display = new DisplaySearch();

    // get data
    $this->get_record_settings($this->protocol_table,$_SESSION['ari_user']['extension'],&$data);

    // New Header
    if ($_SESSION['ari_user']['admin_settings']) {
      $headerText = _("Settings");
    } else {
      $headerText = _("Settings for") . " " . $_SESSION['ari_user']['name'] . " (" . $_SESSION['ari_user']['extension'] . ")";
    }

    $ret .= $display->DisplayHeaderText($headerText);
    $ret .= $display->DisplayLine();

    // lang setting
    if (extension_loaded('gettext')) {
      $setLangText = "
          <p>
 	    " . _("Language:") . "
	    <select name='lang_code'>
              <option value='en_US' " . ($_COOKIE['ari_lang']=='en_US' ? 'selected' : '') .  ">English</option>
              <option value='es_ES' " . ($_COOKIE['ari_lang']=='es_ES' ? 'selected' : '') .  ">Espa&ntilde;ol</option>
              <option value='pt_BR' " . ($_COOKIE['ari_lang']=='pt_BR' ? 'selected' : '') .  ">Portuguese</option>
            </select>
          </p>";
    } 

    // voicemail settings
    $setVoicemailText = "
        <table class='settings'>
	  <tr>
            <td><h3>" . _("Voicemail Settings") . "</h3></td>
	  </tr>
	  <tr>
            <td>" . _("Voicemail Password:") . "</td>
            <td>
              <input name='voicemail_password' type='password' size=16 value=" . $_SESSION['ari_user']['voicemail_password'] . ">
            </td>
	  </tr>
	  <tr>
            <td>" . _("Enter again to confirm:") . "</td>
            <td>
              <input name='voicemail_password_confirm' type='password' size=16 value=" . $_SESSION['ari_user']['voicemail_password'] . ">
            </td>
	  </tr>
	  <tr>
           <td class='note' colspan=2><small>" . _("Passwords must be all numbers and only 4 digits") . "</small></td>
	  </tr>
	  <tr>
            <td>" . _("Audio Format:") . "</td>
            <td>
              <select name='voicemail_audio_format'>
                <option value='.wav' " . ($_COOKIE['ari_voicemail_audio_format']=='.wav' ? 'selected' : '') .  ">" . _("Best Quality") . " (.wav)</option>
                <option value='.gsm' " . ($_COOKIE['ari_voicemail_audio_format']=='.gsm' ? 'selected' : '') .  ">" . _("Smallest Download") . " (.gsm)</option>
              </select>
            </td>
          </tr>
        </table>";

    if ($settings_allow_call_recording_set) {

      // call monitor settings
      foreach($data as $key=>$value) {
        if ($value[keyword]=='record_in') {
          if ($value[data]=='Always') {
            $ri_always = 'checked=checked';
          }
          elseif ($value[data]=='Never') {
            $ri_never = 'checked=checked';
          }
          elseif ($value[data]=='Adhoc') {
            $ri_on_demand = 'checked=checked';
          }
        }
        if ($value[keyword]=='record_out') {
          if ($value[data]=='Always') {
            $ro_always = 'checked=checked';
          }
          elseif ($value[data]=='Never') {
            $ro_never = 'checked=checked';
          }
          elseif ($value[data]=='Adhoc') {
            $ro_on_demand = 'checked=checked';
          }
        }
      }

      $setCallMonitorText = "
        <table class='settings'>
	  <tr>
            <td><h3>" . _("Call Monitor Settings") . "</h3></td>
	  </tr>
	  <tr>
            <td>" . _("Record INCOMING:") . " </td>
            <td>
              <input type='radio' name='record_in' value='Always' " . $ri_always . "/> " . _("Always") . " 
              <input type='radio' name='record_in' value='Never' " . $ri_never . "/> " . _("Never") . "				
              <input type='radio' name='record_in' value='Adhoc' " . $ri_on_demand . "/> " . _("On-Demand") . "
            </td>
          </tr>
          <tr>
            <td>" . _("Record OUTGOING:") . " </td>
            <td>
              <input type='radio' name='record_out' value='Always' " . $ro_always . "/> " . _("Always") . "
              <input type='radio' name='record_out' value='Never' " . $ro_never . "/> " . _("Never") . "				
              <input type='radio' name='record_out' value='Adhoc' " . $ro_on_demand . "/> " . _("On-Demand") . "
            </td>
          </tr>
        </table>";
    }

    $ret .= "
      <form class='settings' name='ari_settings' action='' method='GET'>
        <input type=hidden name=m value=" . $m . ">
        <input type=hidden name=f value='action'>
        <input type=hidden name=a value='update'>
        " . $setLangText . "
	<br>
        " . $setVoicemailText . "
	<br>
        " . $setCallMonitorText . "
        <br>
        <input name='submit' type='submit' value='Update'>
      </form>";

    return $ret;
  }

  /*
   * Reloads Asterisk Configuration
   *
   * @param $extension
   *   Extension to modify
   * @param $direction
   *   Call direction
   * @param $state
   *   State to set to
   */
  function set_recording_status($extension, $direction, $state) {

    // taken from Asterisk Managment Portal functions.php

    global $amp_functions_file;
    global $amportal_conf_file;
    global $standalone;

    if ($standalone['use']) {
      $username = $standalone['asterisk_mgruser'];
      $password = $standalone['asterisk_mgrpass'];
    } 
    else {
      if (is_file($amp_functions_file)) {
        include_once($amp_functions_file);
        $amp_conf = parse_amportal_conf($amportal_conf_file);
        $username = $amp_conf['AMPMGRUSER'];
        $password = $amp_conf['AMPMGRPASS'];
        unset($amp_conf);
      } 
    }

    $fp = fsockopen("localhost", 5038, $errno, $errstr, 10);
    if (!$fp) {
      $_SESSION['ari_error'] =  _("Unable to connect to Asterisk Manager") . " ($errno)<br />\n";
    } else {
      $buffer='';
      stream_set_timeout($fp, 5);
      $buffer = fgets($fp);
      if ($buffer!="Asterisk Call Manager/1.0\r\n") {
        $_SESSION['ari_error'] = _("Asterisk Call Manager not responding") . "<br />\n";
      }
      else {
        $out="Action: Login\r\nUsername: ".$username."\r\nSecret: ".$password."\r\n\r\n";
        fwrite($fp,$out);
        $buffer=fgets($fp);
        if ($buffer!="Response: Success\r\n") {
          $_SESSION['ari_error'] =  _("Asterisk authentication failed:") . "<br />$buffer<br />\n";
        }
        else {
          $buffers=fgets($fp);  // get rid of Message: Authentication accepted

          if ($direction=="In") {
            $direction_opt = "RECORD-IN";
          }
          elseif ($direction=="Out") {
            $direction_opt = "RECORD-OUT";
          }

          if ($state=="Always") {
            $type_opt = "put";
            $enable_opt = " " . "ENABLED";
          }
          elseif ($state=="Never") {
            $type_opt = "put";
            $enable_opt = " " . "DISABLED";
          }
          else {
            $type_opt = "del";
            $enable_opt = "";
          }
          $out="Action: Command\r\nCommand: database $type_opt $direction_opt $extension $enable_opt\r\n\r\n";

          fwrite($fp,$out);
          $buffer=fgets($fp); // get rid of a blank line
          $buffer=fgets($fp);
          if ($buffer!="Response: Follows\r\n") {
            $_SESSION['ari_error'] =  _("Asterisk reload command not understood") . $buffer . "<br />\n";
          }
        }
      }
    }
    fclose($fp);
  }

  /*
   * Gets record data
   *
   * @param $data
   *   Reference to the variable to store the data in
   */
  function get_record_settings($table,$id,&$data) {

    $dbh = $_SESSION['dbh_asterisk'];
    $sql = "SELECT id,
                   keyword,
                   data,
                   flags
             FROM " . $table ."
             WHERE (keyword='record_in'
             OR keyword='record_out')
             AND id='" . $id . "'";

    $data = $dbh->getAll($sql,DB_FETCHMODE_ASSOC);
  }

  /*
   * Gets cdr data
   *
   * @param $data
   *   Reference to the variable to store the data in
   */
  function set_record_settings($file,$table,$id,$record_in,$record_out) {

    // update config file
    $found = false;
    $lines = file($file);  // opens file and reads to array
    $f=fopen($file,"w");  // clear file
    foreach ($lines as $line) {

      unset($value);
      list($var,$value) = split('=',$line);
      $var = trim($var);
      $value = trim($value);

      if (preg_match("/\[" . $id . "\]/i", $var)) {
        $found = true;
      }

      if ($found) {
        if ($var=='record_in') {
          $line = $var . "=" . $record_in ."\n";
        }
        if ($var=='record_out') {
          $line = $var . "=" . $record_out . "\n";
        }
      }   
      fputs($f,$line); // place $line back in file
    }
    fclose($f);

    // update database
    $dbh = $_SESSION['dbh_asterisk'];

    $sql = "UPDATE " . $table . " SET data='out=" . $record_out . "|in=" . $record_in . "' WHERE id='" . $id . "' AND keyword='recording'";
    $sth = $dbh->prepare($sql);
    $res = $dbh->execute($sth);
    if (DB::isError($res)) {
      die($res->getMessage());
    }
  }

}


?>