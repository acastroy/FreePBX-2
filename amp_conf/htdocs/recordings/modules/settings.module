<?php

/**
 * @file
 * Functions for the interface to the call monitor recordings
 */

/**
  * Class for settings
  */
class settings {

  var $protocol_table;
  var $protocol_config_files;

  /*
   * Constructor
   */
  function settings() {

    // determine what protocol user is using
    global $asterisk_protocols;

    foreach ($asterisk_protocols as $protocol => $value) {
      $data = array();
      $this->get_protocol_record_settings($value['table'],$_SESSION['ari_user']['extension'],&$data);
      if (count($data)) {
        $this->protocol_table = $value['table'];  
        $this->protocol_config_files = $value['config_files'];  
        break;
      }  
    }
  }

  /*
   * rank (for prioritizing modules)
   */
  function settings_rank() {

    $rank = 100000;
    return $rank;
  }

  /*
   * Adds menu item to nav menu
   *
   * @param $args
   *   Common arguments
   */
  function settings_nav_menu($args) {

    // put if statement in return string, because do not know $logout until page is built
    $ret .= "
      <?php if ($logout !='') { ?>
        <br>
        <p><small><small><a href='" . $_SERVER['PHP_SELF'] . "?m=settings&f=display'>" . _("Settings") . "</a></small></small></p>
      <?php } ?>";

    return $ret;
  }

  /*
   * Acts on the user settings
   *
   * @param $args
   *   Common arguments
   * @param $a
   *   action
   */
  function settings_action($args) {

    global $admin_username;
    global $asterisk_voicemail_conf;
    global $settings_allow_voicemail_password_set;
    global $settings_allow_call_recording_set;

    // args
    $m = get_argument($args,'m');
    $a = get_argument($args,'a');

    $lang_code = get_argument($args,'lang_code');

    $voicemail_password = get_argument($args,'voicemail_password');
    $voicemail_password_confirm = get_argument($args,'voicemail_password_confirm');
    $voicemail_audio_format = get_argument($args,'voicemail_audio_format');

    $record_in = get_argument($args,'record_in');
    $record_out = get_argument($args,'record_out');

    if ($a=='update') {

      // update i18n language setting
      if (extension_loaded('gettext')) {
        setcookie("ari_lang", $lang_code, time()+365*24*60*60);
      }

      if ($_SESSION['ari_user']['extension']!=$admin_username) {

        // update voicemail password
        if ($settings_allow_voicemail_password_set) {

          // update voicemail password
          if ($voicemail_password=='' || $voicemail_password_confirm=='') {
            $_SESSION['ari_error'] = 
              _("Voicemail password not changed") . "<br>" .
              _("Password and password confirm must not be blank");
          }  
          else if (strlen($voicemail_password)!=4 || !is_numeric($voicemail_password)) {
            $_SESSION['ari_error'] = 
              _("Voicemail password not changed") . "<br>" .
              _("Password must be all numbers and 4 digits");
          }
          else if ($voicemail_password!=$voicemail_password_confirm) {
            $_SESSION['ari_error'] = 
              _("Voicemail password not changed") . "<br>" .
              _("Password and password confirm do not match");
          }
          else {

            // check for writable the files
            $temp_file = $asterisk_voicemail_conf . ".tmp";
            $fp = fopen($temp_file, "w");
            if (!$fp) {
              $_SESSION['ari_error'] = 
                _("Voicemail password not changed") . "<br>" .
                $temp_file . " " . _("does not exist or is not writable");
            }
            else if (!is_writable($asterisk_voicemail_conf)) {
              $_SESSION['ari_error'] = 
                _("Voicemail password not changed") . "<br>" .
                $asterisk_voicemail_conf . " " . _("does not exist or is not writable");
            }
            else {

              // save password
              $lines = file($asterisk_voicemail_conf);
              foreach ($lines as $key => $line) {
                unset($value);
                list($var,$value) = split('=>',$line);
                $var = trim($var);
                if ($var==$_SESSION['ari_user']['extension'] && $value) {

                  // write out line with password change
                  $buf = split(',',$value);
                  $buf[0] = $voicemail_password;
                  $line = $var . " => " . join(',', $buf);
                  fwrite($fp, $line);
                }
                else {

                  // write out original line with no changes
                  fwrite($fp, $line);
                }
              }
              fclose($fp);
              unlink($asterisk_voicemail_conf);
              rename($temp_file,$asterisk_voicemail_conf);

              // reload asterisk voicemail
              $this->reload_asterisk_voicemail();
            }
          }
        }
  
        // update voicemail audio format setting
        setcookie("ari_voicemail_audio_format", $voicemail_audio_format, time()+365*24*60*60);

        // update call monitor record setting
        if ($settings_allow_call_recording_set) {
          $extension = $_SESSION['ari_user']['extension'];
          if ($record_in && $record_out) {
            $this->set_recording_status($extension, "In", $record_in);
            $this->set_recording_status($extension, "Out", $record_out);

            $this->set_record_settings($extension,$record_in,$record_out);
          }
        }
      }
    }

    // redirect to see updated page
    $ret .= "
      <head>
        <script>
        <!--
          window.location = \"" . $_SERVER['PHP_SELF'] . "?m=" . $m . "\"
        // -->
        </script>
    </head>";
  
    return $ret;
  }

  /*
   * Displays stats page
   *
   * @param $args
   *   Common arguments
   */
  function settings_display($args) {

    global $admin_username;
    global $settings_allow_voicemail_password_set;
    global $settings_allow_call_recording_set;

    // args
    $m = get_argument($args,'m');
    $q = get_argument($args,'q');
    $start = get_argument($args,'start');
    $span = get_argument($args,'span');

    $display = new DisplaySearch();

    // get data
    $data = array();
    $this->get_record_settings($_SESSION['ari_user']['extension'],&$data);

    // lang setting options
    if (extension_loaded('gettext')) {
      $setLangText = "
          <p>
 	    " . _("Language:") . "
	    <select name='lang_code'>
              <option value='en_US' " . ($_COOKIE['ari_lang']=='en_US' ? 'selected' : '') .  ">English</option>
              <option value='es_ES' " . ($_COOKIE['ari_lang']=='es_ES' ? 'selected' : '') .  ">Espa&ntilde;ol</option>
              <option value='fr_FR' " . ($_COOKIE['ari_lang']=='fr_FR' ? 'selected' : '') .  ">French</option>
              <option value='de_DE' " . ($_COOKIE['ari_lang']=='de_DE' ? 'selected' : '') .  ">German</option>
              <option value='el_GR' " . ($_COOKIE['ari_lang']=='el_GR' ? 'selected' : '') .  ">Greek</option>
              <option value='it_IT' " . ($_COOKIE['ari_lang']=='it_IT' ? 'selected' : '') .  ">Italian</option>
              <option value='pt_BR' " . ($_COOKIE['ari_lang']=='pt_BR' ? 'selected' : '') .  ">Portuguese</option>
              <option value='sv_SE' " . ($_COOKIE['ari_lang']=='sv_SE' ? 'selected' : '') .  ">Swedish</option>
            </select>
          </p>";
    } 

    // build controls
    if ($_SESSION['ari_user']['extension']!=$admin_username) {

      // voicemail settings
      if ($settings_allow_voicemail_password_set) {
        $setVoicemailText = "
          <table class='settings'>
	    <tr>
              <td><h3>" . _("Voicemail Settings") . "</h3></td>
	    </tr>
	    <tr>
              <td>" . _("Voicemail Password") . ":" . "</td>
              <td>
                <input name='voicemail_password' type='password' size=16 value=" . $_SESSION['ari_user']['voicemail_password'] . ">
              </td>
	    </tr>
	    <tr>
              <td>" . _("Enter again to confirm:") . "</td>
              <td>
                <input name='voicemail_password_confirm' type='password' size=16 value=" . $_SESSION['ari_user']['voicemail_password'] . ">
              </td>
	    </tr>
	    <tr>
             <td class='note' colspan=2><small>" . _("Passwords must be all numbers and only 4 digits") . "</small></td>
	    </tr>
	    <tr>
              <td>" . _("Audio Format:") . "</td>
              <td>
                <select name='voicemail_audio_format'>
                  <option value='.wav' " . ($_COOKIE['ari_voicemail_audio_format']=='.wav' ? 'selected' : '') .  ">" . _("Best Quality") . " (.wav)</option>
                  <option value='.gsm' " . ($_COOKIE['ari_voicemail_audio_format']=='.gsm' ? 'selected' : '') .  ">" . _("Smallest Download") . " (.gsm)</option>
                </select>
              </td>
            </tr>
          </table>";
      }

      // call monitor settings
      if ($settings_allow_call_recording_set) {
        foreach($data as $key=>$value) {
          if ($key=='record_in') {
            if ($value=='Always') {
              $ri_always = 'checked=checked';
            }
            elseif ($value=='Never') {
              $ri_never = 'checked=checked';
            }
            elseif ($value=='Adhoc') {
              $ri_on_demand = 'checked=checked';
            }
          }
          if ($key=='record_out') {
            if ($value=='Always') {
              $ro_always = 'checked=checked';
            }
            elseif ($value=='Never') {
              $ro_never = 'checked=checked';
            }
            elseif ($value=='Adhoc') {
              $ro_on_demand = 'checked=checked';
            }
          }
        }

        $setCallMonitorText = "
          <table class='settings'>
	    <tr>
              <td><h3>" . _("Call Monitor Settings") . "</h3></td>
	    </tr>
	    <tr>
              <td>" . _("Record INCOMING:") . " </td>
              <td>
                <input type='radio' name='record_in' value='Always' " . $ri_always . "/> " . _("Always") . " 
                <input type='radio' name='record_in' value='Never' " . $ri_never . "/> " . _("Never") . "				
                <input type='radio' name='record_in' value='Adhoc' " . $ri_on_demand . "/> " . _("On-Demand") . "
              </td>
            </tr>
            <tr>
              <td>" . _("Record OUTGOING:") . " </td>
              <td>
                <input type='radio' name='record_out' value='Always' " . $ro_always . "/> " . _("Always") . "
                <input type='radio' name='record_out' value='Never' " . $ro_never . "/> " . _("Never") . "				
                <input type='radio' name='record_out' value='Adhoc' " . $ro_on_demand . "/> " . _("On-Demand") . "
              </td>
            </tr>
          </table>";
      }
    }

    // build page content
    $ret .= CheckErrorMessage();

    if ($_SESSION['ari_user']['admin_settings']) {
      $headerText = _("Settings");
    } else {
      $headerText = _("Settings for") . " " . $_SESSION['ari_user']['name'] . " (" . $_SESSION['ari_user']['extension'] . ")";
    }

    $ret .= $display->DisplayHeaderText($headerText);
    $ret .= $display->DisplayLine();

    $ret .= "
      <form class='settings' name='ari_settings' action='' method='GET'>
        <input type=hidden name=m value=" . $m . ">
        <input type=hidden name=f value='action'>
        <input type=hidden name=a value='update'>
        " . $setLangText . "
	<br>
        " . $setVoicemailText . "
	<br>
        " . $setCallMonitorText . "
        <br>
        <input name='submit' type='submit' value='" . _("Update") . "'>
      </form>";

    return $ret;
  }

  /*
   * Sets Asterisk call recording setting
   *
   * @param $extension
   *   Extension to modify
   * @param $direction
   *   Call direction
   * @param $state
   *   State to set to
   */
  function set_recording_status($extension, $direction, $state) {

    global $asterisk_manager_interface;

    if ($direction=="In") {
      $direction_opt = "RECORD-IN";
    }
      elseif ($direction=="Out") {
      $direction_opt = "RECORD-OUT";
    }

    if ($state=="Always") {
      $type_opt = "put";
      $enable_opt = " " . "ENABLED";
    }
    elseif ($state=="Never") {
      $type_opt = "put";
      $enable_opt = " " . "DISABLED";
    }
    else {
      $type_opt = "del";
      $enable_opt = "";
    }

    $asterisk_manager_interface->Command("Action: Command\r\nCommand: database $type_opt $direction_opt $extension $enable_opt\r\n\r\n",$response);
  }

  /*
   * Reloads Asterisk Configuration
   */
  function reload_asterisk_voicemail() {

    global $asterisk_manager_interface;

    $asterisk_manager_interface->Command("Action: Command\r\nCommand: Reload app_voicemail.so\r\n\r\n",$response);
  }

  /*
   * Gets record settings for a protocol
   *
   * @param $table
   *   Table to pull information from
   * @param $id
   *   User to get information about
   * @param $data
   *   Reference to the variable to store the data in
   */
  function get_protocol_record_settings($table,$id,&$data) {

    global $asterisk_manager_interface;

    $asterisk_manager_interface->Command("Action: Command\r\nCommand: database get RECORD-IN $id\r\n\r\n",$response);

    if (preg_match("/ENABLED/",$response)) {
      $data['record_in'] = 'Always';
    }
    elseif (preg_match("/DISABLED/",$response)) { 
      $data['record_in'] = 'Never';
    }
    else {
      $data['record_in'] = 'Adhoc';
    }
    $asterisk_manager_interface->Command("Action: Command\r\nCommand: database get RECORD-OUT $id\r\n\r\n",$response);
    if (preg_match("/ENABLED/",$response)) {
      $data['record_out'] = 'Always';
    }
    elseif (preg_match("/DISABLED/",$response)) { 
      $data['record_out'] = 'Never';
    }
    else {
      $data['record_out'] = 'Adhoc';
    }
  }

  /*
   * Gets record settings
   *
   * @param $id
   *   User to get information about
   * @param $data
   *   Reference to the variable to store the data in
   */
  function get_record_settings($id,&$data) {

    // check protocol tables first
    $this->get_protocol_record_settings($this->protocol_table,$id,&$data);

    // if no data, try users table
    $dbh = $_SESSION['dbh_asterisk'];
    if (!is_array($data)) {

      $sql = "SELECT recording
               FROM users
               WHERE extension='" . $id . "'";

      $raw = $dbh->getAll($sql,DB_FETCHMODE_ASSOC);

      $parts = array();
      $parts = split('[|]', $raw[0]['recording']);

      foreach ($parts as $part) {

        list($key,$value) = split('[=]', $part);

        if ($key=='in') {
          $data['record_in'] = $value;
        }
        elseif ($key=='out') {
          $data['record_out'] = $value;
        }
      }
    }
  }

  /*
   * Sets the record settings
   *
   * @param $id
   *   User to get information about
   * @param $record_in
   *   Incoming recording setting to put in database
   * @param $record_out
   *   Outgoing recording setting to put in database
   */
  function set_record_settings($id,$record_in,$record_out) {

    // update AMP config file (for older versions, depreciate on 11/01/06)
    $config_files = split(';',$this->protocol_config_files);
    foreach ($config_files as $config_file) {
      if (is_writable($config_file)) {

        $found = false;
        $lines = array();
        $lines = file($config_file);  // opens file and reads to array
        $f=fopen($config_file,"w");  // clear file
        foreach ($lines as $line) {

          unset($value);
          list($var,$value) = split('=',$line);
          $var = trim($var);
          $value = trim($value);

          if (preg_match("/\[" . $id . "\]/i", $var)) {
            $found = true;
          }

          if ($found) {
            if ($var=='record_in') {
              $line = $var . "=" . $record_in ."\n";
            }
            if ($var=='record_out') {
              $line = $var . "=" . $record_out . "\n";
            }
          }   
          fputs($f,$line); // place $line back in file
        }
        fclose($f);
      }
    }

    // update database
    $dbh = $_SESSION['dbh_asterisk'];

    $sql = "UPDATE " . $this->protocol_table . " SET data='" . $record_in . "' WHERE id='" . $id . "' AND keyword='record_in'";
    $sth = $dbh->prepare($sql);
    $result = $dbh->execute($sth);
    if (DB::isError($result)) {
      $_SESSION['ari_error'] = $result->getMessage() . " " . _("in table") . " " . $this->protocol_table;
    }

    $sql = "UPDATE " . $this->protocol_table . " SET data='" . $record_out . "' WHERE id='" . $id . "' AND keyword='record_out'";
    $sth = $dbh->prepare($sql);
    $result = $dbh->execute($sth);
    if (DB::isError($result)) {
      $_SESSION['ari_error'] = $result->getMessage() . " " . _("in table") . " " . $this->protocol_table;
    }

    // update AMP database
    $dbh = $_SESSION['dbh_asterisk'];

    $sql = "UPDATE users SET recording='out=" . $record_out . "|in=" . $record_in . "' WHERE extension='" . $id . "'";
    $sth = $dbh->prepare($sql);
    $result = $dbh->execute($sth);
    if (DB::isError($result)) {
      // take this out when backward compatability is depreciated
      // $_SESSION['ari_error'] = $result->getMessage() . " " . _("in table") . " " . "users";
    }
  }

}


?>