<?php

/**
 * @file
 * Functions for the interface to the voicemail recordings
 */

/**
  * Class for voicemail
  */
class voicemail {

  /*
   * rank (for prioritizing modules)
   */
  function voicemail_rank() {

    $rank = 1;
    return $rank;
  }

  /*
   * Adds menu item to nav menu
   *
   * @param $args
   *   Common arguments
   */
  function voicemail_nav_menu($args) {

    // put if statement in return string, because do not know $ari_no_login until page is built
    $ret .= "
      <?php if ($ari_no_login =='') { ?>
        <p><small><small><a href='" . $_SERVER['PHP_SELF'] . "?s=voicemail&f=display'>Voicemail</a></small></small></p>
      <?php } ?>";

    return $ret;
  }

  /*
   * Deletes selected voicemails and updates page
   *
   * @param $args
   *   Common arguments
   */
  function voicemail_nav_submenu($args) {

    global $asterisk_voicemail_path;
    global $asterisk_voicemail_folders;

    // args
    $m = get_argument($args,'m');
    $q = get_argument($args,'q');

    $context = $_SESSION['ari_user']['context'];
    $extension = $_SESSION['ari_user']['extension'];

    $paths = split(';',$asterisk_voicemail_path);

    // make folder list
    foreach($paths as $key => $path) {

      AppendPath($path,$context);
      AppendPath($path,$extension);
  
      if (is_dir($path)) {
        $dh = opendir($path);
        while (false!== ($folder = readdir($dh))) {

          $folderPath = $path;
          AppendPath($folderPath,$folder);

          if($folder!="." && $folder!=".." && 
               filetype($folderPath)=='dir') {
            $i = 0;
            while ($asterisk_voicemail_folders[$i]) {
              if ($asterisk_voicemail_folders[$i]==$folder) {

                // get message count
                $indexes = $this->get_vm_index($folderPath,$q);
                $recordCount = 0;
                $this->get_vm_count($indexes,$recordCount);

                // add folder to list
                $ret .= "<p><small><small>
                           <a href='" . $_SERVER['PHP_SELF'] . "?m=voicemail&q=" . $q . "&folder=" . $folder. "'>
                           " . $folder . " (" . $recordCount . ")" . "
                           </a>
                         </small></small></p>";
              }
              $i++;
            }
          }
        } 
      }
    }

    return $ret;
  }

  /*
   * Acts on the selected voicemails in the method indicated by the action and updates page
   *
   * @param $args
   *   Common arguments
   */
  function voicemail_msg_action($args) {

    global $asterisk_voicemail_folders;

    // args
    $m = get_argument($args,'m');
    $a = get_argument($args,'a');
    $folder = get_argument($args,'folder');
    $q = get_argument($args,'q');

    // get files
    $files = array();
    foreach($_REQUEST as $key => $value) {
      if (preg_match('/selected/',$key)) {
        array_push($files, $value);
      }
    }

    if ($a=='delete') {
      $this->delete_vm_data($files);
    }
    else if ($a=='move_to') {
      $folder_rx = get_argument($args,'folder_rx');
      if ($folder_rx=='') {
        $_SESSION['ari_error'] 
          = _("A folder must be selected before the message can be moved.");
      }
      else {
        $extension = $_SESSION['ari_user']['extension'];
        $this->move_vm_data($files, $extension, $folder_rx);
      }
    } 
    else if ($a=='forward_to') {
      $extension_rx = get_argument($args,'extension_rx');
      if ($extension_rx=='') {
        $_SESSION['ari_error'] 
          = _("An extension must be selected before the message can be forwarded.");
      }
      else {
        $folder_rx = $asterisk_voicemail_folders[0];
        $this->move_vm_data($files, $extension_rx, $folder_rx);
      }
    }

    // redirect to see updated page
    $ret .= "
      <head>
        <script>
        <!--
          window.location = \"" . $_SERVER['PHP_SELF'] . "?m=" . $m . "&folder=" . $folder . "&q=" . $q . "\"
        // -->
        </script>
      </head>";

    return $ret;
  }

  /*
   * Displays stats page
   *
   * @param $args
   *   Common arguments
   */
  function voicemail_display($args) {

    global $asterisk_voicemail_path;
    global $asterisk_voicemail_folders;

    $display = new DisplaySearch();

    // args
    $m = get_argument($args,'m');
    $q = get_argument($args,'q');
    $start = get_argument($args,'start');
    $span = get_argument($args,'span');

    $start = $start=='' ? 0 : $start ;
    $span = $span=='' ? 15 : $span ;

    $paths = split(';',$asterisk_voicemail_path);

    $context = $_SESSION['ari_user']['context'];
    $extension = $_SESSION['ari_user']['extension'];
    $folder = get_argument($args,'folder');
    if (!$folder) {
      $folder = $asterisk_voicemail_folders[0];
    }

    // get data
    foreach($paths as $key => $path) {
      $vmPath = $path . "$context/$extension/$folder";
      $indexes = $this->get_vm_index($vmPath,$q);
      $this->get_vm_count($indexes,$recordCount);
      $this->get_vm_data($indexes,$start,$span,$data);
    }

    // get the recordings from the asterisk server
    $filter = '';
    $recursiveMax = 1;
    $recursiveCount = 0;
    foreach($paths as $key => $path) {
      get_files($path,$filter,$recursiveMax,$recursiveCount,$files);
    }

    // move options
    $i=0;
    while ($asterisk_voicemail_folders[$i]) {
      $f = $asterisk_voicemail_folders[$i];
      if ($f!=$folder) {
        $move_options .= "<option VALUE='" . $f . "'>&nbsp;&nbsp;&nbsp;&nbsp;" .  $f;
      }
      $i++;
    }

    // forward options
    foreach($paths as $key => $path) {
      AppendPath($path,$context);
      if (is_dir($path)) {
        $dh = opendir($path);
        while (false!== ($filename = readdir($dh))) {
          if($filename!="." && $filename!=".." && $filename!="1234") {
            $forward_options .= "<option VALUE='" . $filename . "'>" . $filename;
          }
        } 
      }
    }

    // table controls
    $controls = "
          <input class='infoBar' type='submit' name='a' value='delete'>
          <input class='infoBar' type='submit' name='a' value='move_to'>
          <select name='folder_rx' style='width:140px;'>
            <option VALUE=''>Folder
            " . $move_options . "
          </select>
          <input class='infobar' type='submit' name='a' value='forward_to'>
          <select name='extension_rx'>
            <option VALUE=''>
            " . $forward_options . "
          </select>";

    // table body
    if (isset($data)) {
      foreach($data as $file=>$value) {

        // recording popup link
        $voicemail_audio_format = $_COOKIE['ari_voicemail_audio_format']=='' ? '.wav' : $_COOKIE['ari_voicemail_audio_format'];
        $recording = preg_replace('/.txt/', $voicemail_audio_format, $file);
        if (is_file($recording)) {
          $recordingLink = "<a href='#' onClick=\"javascript:popUp('misc/recording_popup.php?recording=" . $recording . "&date=" . $date . "&time=" . $time . "')\">play</a>";
        } 
        else {
          $_SESSION['ari_error'] = _("Voicemail recording(s) was not found.") . "<br>" .
                                   _("Check voicemail audio format on settings page to change from") . " " . $_COOKIE['ari_voicemail_audio_format'];
        }

        $tableText .= "
          <tr>
            <td class='checkbox'><input type=checkbox name='selected" . ++$i . "' value=" . $file . "></td>
            <td width=68>" . GetDateFormat($value['origtime']) . "</td>
            <td>" . GetTimeFormat($value['origtime']) . "</td>
            <td width=100>" . $value[callerid] . "</td>
            <td>" . $value[priority] . "</td>
            <td width=90>" . $value[origmailbox] . "</td>
            <td>" . $value[duration] . " sec</td>
            <td>" . $recordingLink . "</td>
          </tr>";
      }
    }

    // build page content
    $ret .= CheckErrorMessage();
    $ret .= $display->DisplayHeaderText(_("Voicemail for") . " " . $_SESSION['ari_user']['name'] . " (" . $extension . ")");
    if ($extension=='admin') {
      $_SESSION['ari_error'] = _("No Voicemail Recordings for Admin");
      $ret .= $display->DisplayLine();
      return $ret;
    }
    $ret .= $display->DisplaySearchBlock('left',$m,$folder,$q,true);

    // start form
    $ret .= "
      <form  name='voicemail_form' action='" . $_SERVER['PHP_SELF'] . "' method='GET'>
        <input type=hidden name=m value=" . $m . ">	
        <input type=hidden name=f value=msg_action>
        <input type=hidden name=q value=" . $q . ">
        <input type=hidden name=folder value=" . $folder . ">
        <input type=hidden name=start value=0>";
    $ret .= $display->DisplayInfoBarBlock($controls,$q,$start,$span,$recordCount);

    // add javascript for popup and message actions
    $ret .= "
      <SCRIPT LANGUAGE='JavaScript'>
      <!-- Begin
      function popUp(URL) {
        popup = window.open(URL, 'play', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=1,width=324,height=24');
      }

      function checkAll(form,set) {
        var elem = 0;
        var i = 0;
        while (elem = form.elements[i]) {
          if (set) {
            elem.checked = true;
          } else {
            elem.checked = false;
          }
          i++;
        }
        return true;
      }
      // End -->
      </script>";

    // table
    $ret .= "
      <table>
        <tr>
          <td>
            <small>select: </small>
            <small><a href='' OnClick=\"checkAll(document.voicemail_form,true); return false;\">all</a></small>
            <small><a href='' OnClick=\"checkAll(document.voicemail_form,false); return false;\">none</a></small>
          </td>
        </tr>
      </table>
      <table class='voicemail'>
        <tr>
          <th></th>
          <th>Date</th>
          <th>Time</th>
          <th>Caller ID</th>
          <th>Priority</th>
          <th>Orig Mailbox</th>
          <th>Duration</th>
          <th>Recording</th>
        </tr>
        " . $tableText . "
      </table>";

    // end form
    $ret .= "</form>";

    $ret .= "<br>";
    $ret .= $display->DisplaySearchBlock('center',$m,$folder,$q,false);
    $ret .= $display->DisplayNavigationBlock($s,$folder,$q,$start,$span,$recordCount);

    return $ret;
  }

  /*
   * Gets voicemail data
   *
   * @param $data
   *   Reference to the variable to store the data in
   * @param $q
   *   search string
   */
  function get_vm_index($path,$q) {

    $filter = '.txt';
    $recursiveMax = 0;
    $recursiveCount = 0;
    get_files($path,$filter,$recursiveMax,$recursiveCount,$files);

    if (isset($files)) {

      // ugly, but sorts array by time stamp
      foreach ($files as $key1 => $file) {
        $indexes[$file] = $file;
      }
      if (count($indexes)) {
        arsort($indexes);
      } 
    }

    return $indexes;
  }

  /*
   * Deletes selected voicemails
   *
   * @param $files
   *   Array of files to delete
   */
  function delete_vm_data($files) {

    foreach($files as $key => $path) {

      // get file parts for search
      $path_parts = pathinfo($path);
      $path = $path_parts['dirname'];
      CheckPathSlash($path);

      list($name,$ext) = split("\.",$path_parts['basename']);

      // delete all related files using a wildcard
      if (is_dir($path)) {
        foreach(glob($path . $name . ".*") as $fn) {
          unlink($fn);
        } 
      }
    }
  }

  /*
   * Moves selected voicemails to a specified folder
   *
   * @param $files
   *   Array of files to delete
   * @param $extension_rx
   *   Mailbox to move message to
   * @param $folder_rx
   *   Folder to move the messages to
   */
  function move_vm_data($files,$extension_rx,$folder_rx) {

    global $asterisk_voicemail_path;

    $context = $_SESSION['ari_user']['context'];

    // recieving path
    $paths = split(';',$asterisk_voicemail_path);
    $path_rx = $paths[0];
    AppendPath($path_rx,$context);
    AppendPath($path_rx,$extension_rx);
    AppendPath($path_rx,$folder_rx);
    if (!is_dir($path_rx)) {
      mkdir("$path_rx", 0700); 
    }

    // get recieving folder last message number
    if (is_dir($path_rx)) {

      $lastNum = 0;
      $lastNumLen = 4;

      $dh = opendir($path_rx);
      while (false != ($filename = readdir($dh))) {
        if($filename!="." && $filename!="..") {

          $msg_path = $path_rx;
          AppendPath($msg_path,$filename);
          if (is_file($msg_path)) {
            $path_parts = pathinfo($msg_path);
            $num = preg_replace("/[a-zA-Z]|\./",'', $path_parts['basename']);
            if ($num > $lastNum) {
              $lastNum = $num;
              $lastNumLen = strlen($lastNum);
            }
          } 
        }
      } 
    }
    else {
      $_SESSION['ari_error'] = _("Could not create mailbox folder") . " " . $folder_rx . " " . _("on the server");
      return;
    }

    // copy files to new location, incrementing each message number 
    asort($files);
    foreach($files as $key => $path) {

      // get file parts for search
      $path_parts = pathinfo($path);
      $path = $path_parts['dirname'];
      CheckPathSlash($path);
      list($name,$ext) = split("\.",$path_parts['basename']);
      if (is_dir($path)) {

        $lastNum++;
        foreach(glob($path . $name . ".*") as $src) {

          $dest = $path_rx; 
          $path_parts = pathinfo($src);
          $folder_rx = preg_replace("/\d+/",sprintf("%0" . $lastNumLen . "d",$lastNum),$path_parts['basename']);
          AppendPath($dest,$folder_rx);

          copy($src,$dest);
          unlink($src);
        } 
      }
    }
  }

  /*
   * Gets voicemail record count
   *
   * @param $indexes
   *   array of files to be counted
   * @param $count
   *   Reference to the variable to store the data in
   */
  function get_vm_count($indexes,&$count) {

    $count = $count + count($indexes);
  }

  /*
   * Gets voicemail data
   *
   * @param $indexes
   *   array of voicemail files
   * @param $start
   *   message number to start page with
   * @param $span
   *   number of messages to display on page
   * @param $data
   *   Reference to the variable to store the data in
   */
  function get_vm_data($indexes,$start,$span,&$data) {

    if (!isset($indexes)) {
      return;
    }

    // populate array 
    $i = 0;
    foreach ($indexes as $file => $time) {
      if ($i>$start-1+$span) {
        return;
      }
      elseif ($i>$start-1 && $i<$start+$span) {
        $lines = file($file);
        foreach ($lines as $key => $line) {
          unset($value);
          list($var,$value) = split('=',$line);
          if ($value) {
            $data[$file][$var] = $value;
          }
        }
      }
      $i++;
    }
  }

}


?>