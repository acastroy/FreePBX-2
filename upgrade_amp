#!/usr/bin/php
<?php

// define versions. latest version must be last
$versions = array(
		'1.10.005',
		'1.10.006',
		'1.10.007',
	);

define("AMP_CONF", "/etc/amportal.conf");

define("UPGRADE_DIR", dirname(__FILE__)."/upgrades");

/********************************************************************************************************************/

function out($text) {
	echo $text."\n";
}

function outn($text) {
	echo $text;
}

function error($text) {
	echo "[ERROR] ".$text."\n";
}

function fatal($text) {
	echo "[FATAL] ".$text."\n";
	exit(1);
}

function debug($text) {
	global $debug;
	
	if ($debug) echo "[DEBUG] ".$text."\n";
}

function showHelp() {
	out("Optional parameters:");
	out("  --help, -h, -?    Show this help");
	out("  --debug           Enable debug output");
	out("  --dry-run         Don't actually do anything");
}

function parse_amportal_conf($filename) {
	$file = file($filename);
	foreach ($file as $line) {
		if (preg_match("/^\s*([a-zA-Z0-9]+)\s*=\s*(.*)\s*([;#].*)?/",$line,$matches)) { 
			$conf[ $matches[1] ] = $matches[2];
		}
	}
	return $conf;
}

//get the version number
function getversion() {
	global $db;
	$sql = "SELECT value FROM admin WHERE variable = 'version'";
	$results = $db->getAll($sql);
	if(DB::IsError($results)) {
		return false;
	}
	return $results[0][0];
}

//set the version number
function setversion($version) {
	global $db;
	$sql = "UPDATE admin SET value = '".$version."' WHERE variable = 'version'";
	debug($sql);
	$result = $db->query($sql); 
	if(DB::IsError($result)) {     
		die($result->getMessage()); 
	}
}

function write_amportal_conf($filename, $conf) {
	$file = file($filename);
	// parse through the file
	foreach (array_keys($file) as $key) {
		if (preg_match("/^\s*([a-zA-Z0-9]+)\s*=\s*(.*)\s*([;#].*)?/",$file[$key],$matches)) {
			// this is an option=value line
			if (isset($conf[ $matches[1] ])) {
				// rewrite the line, if we have this in $conf
				$file[$key] = $matches[1]."=".$conf[ $matches[1] ]."\n";
				// unset it so we know what's new
				unset($conf[ $matches[1] ]);
			}
		}
	}
	
	// add new entries
	foreach ($conf as $key=>$val) {
		$file[] = $key."=".$val."\n";
	}
	
	// write the file
	if (!$fd = fopen($filename, "w")) {
		fatal("Could not open ".$filename." for writing");
	}
	fwrite($fd, implode("",$file));
	fclose($fd);
}

/** Include a .php file
 * This is a function just to keep a seperate context
 */
function run_included($file) {
	global $db;
	global $amp_conf;
	
	include($file);
}

/** Install a particular version
 */
function install_upgrade($version) {
	global $db;
	global $dryrun;
	
	if (is_dir(UPGRADE_DIR."/".$version)) {
		$dir = opendir(UPGRADE_DIR."/".$version);
		while ($file = readdir($dir)) {
			if (($file[0] != ".") && is_file(UPGRADE_DIR."/".$version."/".$file)) {
				if (strtolower(substr($file,-4)) == ".sql") {
					out("-> Running SQL script ".UPGRADE_DIR."/".$version."/".$file);
					// run sql script
					$fd = fopen(UPGRADE_DIR."/".$version."/".$file, "r");
					while (!feof($fd)) {
						$data .= fread($fd, 1024);
					}
					fclose($fd);

					preg_match_all("/((SELECT|INSERT|UPDATE|DELETE|CREATE|DROP).*);\s*\n/Us", $data, $matches);
					
					foreach ($matches[0] as $sql) {
						debug($sql);
						if (!$dryrun) {
							$result = $db->query($sql); 
							if(DB::IsError($result)) {     
								fatal($result->getDebugInfo()."\" while running ".$file."\n"); 
							}
						}
					}
					
				} else if (strtolower(substr($file,-4)) == ".php") {
					out("-> Running PHP script ".UPGRADE_DIR."/".$version."/".$file);
					if (!$dryrun) {
						run_included(UPGRADE_DIR."/".$version."/".$file);
					}
					
				} else if (is_executable(UPGRADE_DIR."/".$version."/".$file)) {
					out("-> Executing ".UPGRADE_DIR."/".$version."/".$file);
					if (!$dryrun) {
						exec(UPGRADE_DIR."/".$version."/".$file);
					}
				} else {
					error("-> Don't know what to do with ".UPGRADE_DIR."/".$version."/".$file);
				}
			}
		}
	}
}

/** Invoke upgrades
 * @param $versions array	The version upgrade scripts to run
 */
function run_upgrade($versions) {
	global $dryrun;
	
	foreach ($versions as $version) {
		out("Upgrading to ".$version."..");
		install_upgrade($version);
		if (!$dryrun) {
			setversion($version);
		}
		out("Upgrading to ".$version."..OK");
	}
}

/********************************************************************************************************************/

// **** Make sure we have PEAR's DB.php, and include it

outn("Checking for PEAR DB..");
if (! @ include('DB.php')) {
	out("FAILED");
	fatal("PEAR must be installed (requires DB.php). Include path: ".ini_get("include_path"));
}
out("OK");


// **** Make sure we have PEAR's GetOpts.php, and include it

outn("Checking for PEAR Console::Getopt..");
if (! @ include("Console/Getopt.php")) {
	out("FAILED");
	fatal("PEAR must be installed (requires Console/Getopt.php). Include path: ".ini_get("include_path"));
}
out("OK");


// **** Parse out command-line options

$shortopts = "h?u:p:";
$longopts = array("help","debug","dry-run","username=","password=");

$args = Console_Getopt::getopt(Console_Getopt::readPHPArgv(), $shortopts, $longopts);
if (is_object($args)) {
	// assume it's PEAR_ERROR
	out($args->message);
	exit(255);
}

$debug = false;
$dryrun = false;

foreach ($args[0] as $arg) {
	switch ($arg[0]) {
		case "--help": case "h": case "?":
			showHelp();
			exit(10);
		break;
		case "--dry-run":
			out("Dry-run only, nothing will be changed");
			$dryrun = true;
		break;
		case "--debug":
			$debug = true;
			debug("Debug mode enabled");
		break;
		case "--username": case "u":
			out("Using username: ".$arg[1]);
			$new_username = $arg[1];
		break;
		case "--password": case "p":
			out("Using password: ".str_repeat("*",strlen($arg[1])));
			$new_password = $arg[1];
		break;
	}
}


// **** Look for user = root

outn("Checking user..");
if ($_ENV["USER"] != "root") {
	out("FAILED");
	fatal($argv[0]." must be run as root");
}
out("OK");




// **** Check for amportal.conf, create if necessary

outn("Checking for ".AMP_CONF."..");
if (!file_exists(AMP_CONF)) {
	out(AMP_CONF." does not exist, copying default");
	copy("amportal.conf", "/etc/amportal.conf");
}
out("OK");


// **** read amportal.conf

outn("Reading ".AMP_CONF."..");
$amp_conf = parse_amportal_conf(AMP_CONF);
if (count($amp_conf) == 0) {
	fatal("FAILED");
}
out("OK");

if (isset($new_username) || isset($new_password)) {
	// new username/pwd 
	
	if (isset($new_username)) {
		$amp_conf["AMPDBUSER"] = $new_username;
	}
	if (isset($new_password)) {
		$amp_conf["AMPDBPASS"] = $new_password;
	}
	
	// write amportal.conf
	write_amportal_conf(AMP_CONF, $amp_conf);
}

// **** Connect to database

outn("Connecting to database..");

$db_user = $amp_conf["AMPDBUSER"];
$db_pass = $amp_conf["AMPDBPASS"];
$db_host = 'localhost';
$db_name = 'asterisk';
$db_engine = 'mysql';

$datasource = $db_engine.'://'.$db_user.':'.$db_pass.'@'.$db_host.'/'.$db_name;

$db = DB::connect($datasource); // attempt connection

if(DB::isError($db)) {
	out("FAILED");
	debug($db->userinfo);
	out("Try running ".$argv[0]." --username=user --password=pass  (using your own user and pass)");
	fatal("Cannot connect to database");
	
}
out("OK");


// **** Read DB for version info

outn("Checking current version of AMP..");
$version = getversion();
if (!$version) {
	out("no version information");
	out("Assuming new installation");
} else {
	out($version);
}


// **** Read upgrades/ directory

outn("Checking for upgrades..");

// read it from ugprades/ unless $version has already been defined
if (!isset($versions)) {
	$versions = array();
	$dir = opendir(UPGRADE_DIR);
	while ($file = readdir($dir)) {
		if (($file[0] != ".") && is_dir(UPGRADE_DIR."/".$file)) {
			$versions[] = $file;
		}
	}
	closedir($dir);

	// callback to use php's version_compare() to sort	
	usort($versions, "version_compare");
}

if (false !== ($pos = array_search($version, $versions))) {
	$upgrades = array_slice($versions, $pos+1);
	out(count($upgrades)." found");
	
	run_upgrade($upgrades);
} else {
	out("Current version not found");
}



?>
